diff --git a/mpesa/src/Libraries/Express/MpesaExpressCalls.php b/mpesa/src/Libraries/Express/MpesaExpressCalls.php
index b01b6f0..d290c95 100644
--- a/mpesa/src/Libraries/Express/MpesaExpressCalls.php
+++ b/mpesa/src/Libraries/Express/MpesaExpressCalls.php
@@ -341,299 +341,397 @@ class MpesaExpressCalls extends MpesaApiConnection
         return $this;
     }

-    /* REQUEST
+    /**
+     * Initiate an STK Push request to prompt customer for payment
+     *
+     * This method sends a request to the Mpesa API to initiate an STK Push,
+     * which prompts the customer to enter their M-Pesa PIN on their phone to authorize payment.
+     *
+     * Example successful response:
+     * ```json
      * {
-            "MerchantRequestID":"15878-2630061-1",
-            "CheckoutRequestID":"ws_CO_DMZ_48451723_08072018100531327",
-            "ResponseCode": "0",
-            "ResponseDescription":"Success. Request accepted for processing",
-            "CustomerMessage":"Success. Request accepted for processing"
+     *   "MerchantRequestID": "29115-34620561-1",
+     *   "CheckoutRequestID": "ws_CO_191219202020154",
+     *   "ResponseCode": "0",
+     *   "ResponseDescription": "Success. Request accepted for processing",
+     *   "CustomerMessage": "Success. Request accepted for processing"
+     * }
+     * ```
+     *
+     * Required properties that must be set before calling this method:
+     * - ApplicationStatus: 'sandbox' or 'live'
+     * - ConsumerKey: Your API consumer key
+     * - ConsumerSecret: Your API consumer secret
+     * - BusinessShortCode: The business short code
+     * - LipaNaMpesaPasskey: Your Lipa Na M-Pesa passkey
+     * - TransactionType: Usually 'CustomerPayBillOnline'
+     * - Amount: The amount to charge
+     * - PartyA: The phone number sending money
+     * - PartyB: The business short code receiving money
+     * - PhoneNumber: The phone number to prompt for payment
+     * - CallBackURL: The URL to receive the callback
+     * - AccountReference: Reference for the transaction
+     * - TransactionDesc: Description of the transaction
+     *
+     * @return string JSON response from the API
+     * @throws \InvalidArgumentException If required properties are not set
+     * @throws \RuntimeException If there's an error in the API request
+     */
+    public function STKPush(): string
+    {
+        // Validate required properties
+        $requiredProperties = [
+            'ConsumerKey', 'ConsumerSecret', 'BusinessShortCode', 'LipaNaMpesaPasskey',
+            'TransactionType', 'Amount', 'PartyA', 'PartyB', 'PhoneNumber',
+            'CallBackURL', 'AccountReference', 'TransactionDesc'
+        ];
+
+        foreach ($requiredProperties as $property) {
+            if (empty($this->$property)) {
+                throw new \InvalidArgumentException("Required property '{$property}' is not set");
+            }
         }

-   FAIL RESPONSE
-    {
-      "Body": {
-        "stkCallback": {
-          "MerchantRequestID": "16812-2660984-1",
-          "CheckoutRequestID": "ws_CO_DMZ_48358274_08072018145453949",
-          "ResultCode": 1032,
-          "ResultDesc": "Request cancelled by user"
+        // Determine if we're using live or sandbox environment
+        $isLive = $this->ApplicationStatus === 'live';
+
+        // Get the appropriate URL based on environment
+        $url = $isLive
+            ? 'https://api.safaricom.co.ke/mpesa/stkpush/v1/processrequest'
+            : 'https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest';
+
+        try {
+            // Generate access token
+            $token = $this->generateAccessToken($isLive, $this->ConsumerKey, $this->ConsumerSecret);
+
+            // Format timestamp and generate password
+            $timestamp = date('YmdHis');
+            $password = base64_encode($this->BusinessShortCode . $this->LipaNaMpesaPasskey . $timestamp);
+
+            // Prepare request data
+            $requestData = [
+                'BusinessShortCode' => $this->BusinessShortCode,
+                'Password' => $password,
+                'Timestamp' => $timestamp,
+                'TransactionType' => $this->TransactionType,
+                'Amount' => $this->Amount,
+                'PartyA' => $this->PartyA,
+                'PartyB' => $this->PartyB,
+                'PhoneNumber' => $this->PhoneNumber,
+                'CallBackURL' => $this->CallBackURL,
+                'AccountReference' => $this->AccountReference,
+                'TransactionDesc' => $this->TransactionDesc,
+            ];
+
+            // Initialize cURL session
+            $curl = curl_init();
+            curl_setopt($curl, CURLOPT_URL, $url);
+            curl_setopt($curl, CURLOPT_HTTPHEADER, [
+                'Content-Type: application/json',
+                'Authorization: Bearer ' . $token
+            ]);
+            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
+            curl_setopt($curl, CURLOPT_POST, true);
+            curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($requestData));
+
+            // Execute cURL request
+            $response = curl_exec($curl);
+            $error = curl_error($curl);
+
+            curl_close($curl);
+
+            // Handle cURL errors
+            if ($error) {
+                throw new \RuntimeException("cURL Error: " . $error);
+            }
+
+            return $response;
+
+        } catch (\Exception $e) {
+            // Convert any exceptions to JSON error response
+            return json_encode([
+                'status' => 'error',
+                'message' => $e->getMessage()
+            ]);
         }
-      }
-    }
-
-    SUCCESS RESPONSE
-    {
-      "Body": {
-        "stkCallback": {
-          "MerchantRequestID": "15886-2691224-1",
-          "CheckoutRequestID": "ws_CO_DMZ_48357162_08072018145122283",
-          "ResultCode": 0,
-          "ResultDesc": "The service request is processed successfully.",
-          "CallbackMetadata": {
-            "Item": [
-              {
-                "Name": "Amount",
-                "Value": 5
-              },
-              {
-                "Name": "MpesaReceiptNumber",
-                "Value": "MG80EO2DO8"
-              },
-              {
-                "Name": "Balance"
-              },
-              {
-                "Name": "TransactionDate",
-                "Value": 20180708145208
-              },
-              {
-                "Name": "PhoneNumber",
-                "Value": 254712550547
-              }
-            ]
-          }
-        }
-      }
     }
-     */
-    public function STKPush(){
-        //$live=config('gateway.module.gateway.mpesa.b2c.is_live');
-        $live= $this->ApplicationStatus == 'live' ? true : false;

-        if(!isset($live)){
-            die("please declare the application status as defined in the documentation");
-        }

-        if( $live == true){
-            $url = 'https://api.safaricom.co.ke/mpesa/stkpush/v1/processrequest';
-        }elseif ($live== false){
-            $url = 'https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest';
-        }else{
-            return json_encode(["Message"=>"invalid application status"]);
+    /**
+     * Query the status of an STK Push transaction
+     *
+     * This method sends a request to the Mpesa API to check the status of a previously
+     * initiated STK Push transaction using its CheckoutRequestID.
+     *
+     * Example successful response:
+     * ```json
+     * {
+     *   "ResponseCode": "0",
+     *   "ResponseDescription": "The service request has been accepted successfully",
+     *   "MerchantRequestID": "25465-1234567-1",
+     *   "CheckoutRequestID": "ws_CO_DMZ_12345678_12345678",
+     *   "ResultCode": "0",
+     *   "ResultDesc": "The service request is processed successfully"
+     * }
+     * ```
+     *
+     * Required properties that must be set before calling this method:
+     * - ApplicationStatus: 'sandbox' or 'live'
+     * - ConsumerKey: Your API consumer key
+     * - ConsumerSecret: Your API consumer secret
+     * - BusinessShortCode: The business short code
+     * - Password: The password (generated using LipaNaMpesaPasskey)
+     * - Timestamp: The timestamp in YYYYMMDDHHmmss format
+     * - CheckoutRequestID: The checkout request ID from the STK Push response
+     *
+     * @return string JSON response from the API
+     * @throws \InvalidArgumentException If required properties are not set
+     * @throws \RuntimeException If there's an error in the API request
+     */
+    public function STKPushQuery(): string
+    {
+        // Validate required properties
+        $requiredProperties = [
+            'ConsumerKey', 'ConsumerSecret', 'BusinessShortCode',
+            'Password', 'Timestamp', 'CheckoutRequestID'
+        ];
+
+        foreach ($requiredProperties as $property) {
+            if (empty($this->$property)) {
+                throw new \InvalidArgumentException("Required property '{$property}' is not set");
+            }
         }

-        $token = $this->generateAccessToken($live,$this->ConsumerKey,$this->ConsumerSecret);
-
-
-        $curl = curl_init();
-        curl_setopt($curl, CURLOPT_URL, $url);
-        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization:Bearer '.$token));
-
-        $timestamp='20'.date(    "ymdhis");
-        $password=base64_encode($this->BusinessShortCode.$this->LipaNaMpesaPasskey.$timestamp);
-
-
-        $curl_post_data = array(
-            'BusinessShortCode' => $this->BusinessShortCode,
-            'Password' => $password,
-            'Timestamp' => $timestamp,
-            'TransactionType' => $this->TransactionType,
-            'Amount' => $this->Amount,
-            'PartyA' => $this->PartyA,
-            'PartyB' => $this->PartyB,
-            'PhoneNumber' => $this->PhoneNumber,
-            'CallBackURL' => $this->CallBackURL,
-            'AccountReference' => $this->AccountReference,
-            'TransactionDesc' => $this->TransactionDesc,
-        );
-
-        $data_string = json_encode($curl_post_data);
-
-        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
-        curl_setopt($curl, CURLOPT_POST, true);
-        curl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);
-
-        $curl_response = curl_exec($curl);
-        $err = curl_error($curl);
-
-        curl_close($curl);
-
-        if ($err) {
-            echo "cURL Error #:" . $err;
-            $curl_response = "cURL Error #:" . $err;
-            return $curl_response;
-        } else {
-            return $curl_response;
+        // Determine if we're using live or sandbox environment
+        $isLive = $this->ApplicationStatus === 'live';
+
+        // Get the appropriate URL based on environment
+        $url = $isLive
+            ? 'https://api.safaricom.co.ke/mpesa/stkpushquery/v1/query'
+            : 'https://sandbox.safaricom.co.ke/mpesa/stkpushquery/v1/query';
+
+        try {
+            // Generate access token
+            $token = $this->generateAccessToken($isLive, $this->ConsumerKey, $this->ConsumerSecret);
+
+            // Prepare request data
+            $requestData = [
+                'BusinessShortCode' => $this->BusinessShortCode,
+                'Password' => $this->Password,
+                'Timestamp' => $this->Timestamp,
+                'CheckoutRequestID' => $this->CheckoutRequestID
+            ];
+
+            // Initialize cURL session
+            $curl = curl_init();
+            curl_setopt($curl, CURLOPT_URL, $url);
+            curl_setopt($curl, CURLOPT_HTTPHEADER, [
+                'Content-Type: application/json',
+                'Authorization: Bearer ' . $token
+            ]);
+            curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
+            curl_setopt($curl, CURLOPT_POST, true);
+            curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($requestData));
+            curl_setopt($curl, CURLOPT_HEADER, false);
+
+            // Execute cURL request
+            $response = curl_exec($curl);
+            $error = curl_error($curl);
+
+            curl_close($curl);
+
+            // Handle cURL errors
+            if ($error) {
+                throw new \RuntimeException("cURL Error: " . $error);
+            }
+
+            return $response;
+
+        } catch (\Exception $e) {
+            // Convert any exceptions to JSON error response
+            return json_encode([
+                'status' => 'error',
+                'message' => $e->getMessage()
+            ]);
         }
-
     }

-
     /**
-     * Use this function to initiate an STKPush Status Query request.
-     * @param $checkoutRequestID | Checkout RequestID
-     * @param $businessShortCode | Business Short Code
-     * @param $password | Password
-     * @param $timestamp | Timestamp
-     * @return mixed|string
-     */
-    public function STKPushQuery(){
-        $live= $this->ApplicationStatus == 'live' ? true : false;
-
-        if(!isset($live)){
-            die("please declare the application status as defined in the documentation");
-        }
-
-        if( $live == true){
-            $url = 'https://api.safaricom.co.ke/mpesa/stkpushquery/v1/query';
-        }elseif ($live== false){
-            $url = 'https://sandbox.safaricom.co.ke/mpesa/stkpushquery/v1/query';
-        }else{
-            return json_encode(["Message"=>"invalid application status"]);
+     * Process an STK Push transaction result from Mpesa API
+     *
+     * This method extracts and formats the data from an STK Push transaction result.
+     * It handles both successful and failed transactions based on the result code.
+     *
+     * Example callback data structure:
+     * ```json
+     * {
+     *   "Body": {
+     *     "stkCallback": {
+     *       "MerchantRequestID": "29115-34620561-1",
+     *       "CheckoutRequestID": "ws_CO_191219202020154",
+     *       "ResultCode": 0,
+     *       "ResultDesc": "The service request is processed successfully.",
+     *       "CallbackMetadata": {
+     *         "Item": [
+     *           {
+     *             "Name": "Amount",
+     *             "Value": 1
+     *           },
+     *           {
+     *             "Name": "MpesaReceiptNumber",
+     *             "Value": "NLJ7RT61SV"
+     *           },
+     *           {
+     *             "Name": "Balance"
+     *           },
+     *           {
+     *             "Name": "TransactionDate",
+     *             "Value": 20191219202115
+     *           },
+     *           {
+     *             "Name": "PhoneNumber",
+     *             "Value": 254722000000
+     *           }
+     *         ]
+     *       }
+     *     }
+     *   }
+     * }
+     * ```
+     *
+     * @param array $requestResponse The transaction result data from Mpesa API
+     * @return array Formatted response with transaction details
+     * @throws \InvalidArgumentException If the request response is invalid
+     */
+    public function processTransactionResult(array $requestResponse): array
+    {
+        // Validate the request response structure
+        if (!isset($requestResponse['Body']) ||
+            !isset($requestResponse['Body']['stkCallback']) ||
+            !isset($requestResponse['Body']['stkCallback']['ResultCode'])) {
+            throw new \InvalidArgumentException('Invalid request response structure: Missing required fields');
         }

-        $token = $this->generateAccessToken($live,$this->ConsumerKey,$this->ConsumerSecret);
+        $stkCallback = $requestResponse['Body']['stkCallback'];
+        $resultCode = $stkCallback['ResultCode'];

+        switch ($resultCode) {
+            case 0: // Success
+                // Validate callback metadata structure
+                if (!isset($stkCallback['CallbackMetadata']) ||
+                    !isset($stkCallback['CallbackMetadata']['Item'])) {
+                    throw new \InvalidArgumentException('Invalid callback metadata structure: Missing Item array');
+                }

-        $curl = curl_init();
-        curl_setopt($curl, CURLOPT_URL, $url);
-        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type:application/json','Authorization:Bearer '.$token));
-
-        $curl_post_data = array(
-            'BusinessShortCode' => $this->BusinessShortCode,
-            'Password' => $this->Password,
-            'Timestamp' => $this->Timestamp,
-            'CheckoutRequestID' => $this->CheckoutRequestID
-        );
-
-        $data_string = json_encode($curl_post_data);
-
-        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
-        curl_setopt($curl, CURLOPT_POST, true);
-        curl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);
-        curl_setopt($curl, CURLOPT_HEADER, false);
-
-        $curl_response = curl_exec($curl);
-
-        $err = curl_error($curl);
-
-        curl_close($curl);
+                $callbackMetadata = $stkCallback['CallbackMetadata']['Item'];
+                $transaction = [];

-        if ($err) {
-            echo "cURL Error #:" . $err;
-            $curl_response = "cURL Error #:" . $err;
-            return $curl_response;
-        } else {
-            return $curl_response;
-        }
-    }
+                // Process each item in the callback metadata
+                foreach ($callbackMetadata as $payment) {
+                    if (isset($payment['Name'])) {
+                        $transaction[] = [
+                            $payment['Name'] => $payment['Value'] ?? ''
+                        ];
+                    }
+                }

-    public function processTransactionResult(array $requestResponse){
-        $resultCode = $requestResponse['Body']['stkCallback']['ResultCode'];
-        switch ($resultCode){
-            case 0:
-                $CallbackMetadata = $requestResponse['Body']['stkCallback']['CallbackMetadata']['Item'];
-                $transaction = [];
-                foreach ($CallbackMetadata as $payment){
-                    $transaction[] = [
-                        $payment['Name'] => isset($payment['Value']) ? $payment['Value']:''
-                    ];
+                // Ensure we have all expected items
+                if (count($transaction) < 5) {
+                    throw new \InvalidArgumentException('Invalid callback metadata: Missing expected items');
                 }
+
                 return [
                     'status' => 'success',
-                    'message' => $requestResponse['Body']['stkCallback']['ResultDesc'],
+                    'message' => $stkCallback['ResultDesc'] ?? 'Transaction successful',
                     'data' => [
-                        'Amount' => $transaction[0]['Amount'],
-                        'MpesaReceiptNumber' => $transaction[1]['MpesaReceiptNumber'],
-                        'Balance' => $transaction[2]['Balance'],
-                        'TransactionDate' => $transaction[3]['TransactionDate'],
-                        'PhoneNumber' => $transaction[4]['PhoneNumber'],
-                        'MerchantRequestID' => $requestResponse['Body']['stkCallback']['MerchantRequestID'],
-                        'CheckoutRequestID' => $requestResponse['Body']['stkCallback']['CheckoutRequestID'],
-                        'ResultCode' => $requestResponse['Body']['stkCallback']['ResultCode'],
-                        'ResultDesc' => $requestResponse['Body']['stkCallback']['ResultDesc'],
+                        'Amount' => $transaction[0]['Amount'] ?? null,
+                        'MpesaReceiptNumber' => $transaction[1]['MpesaReceiptNumber'] ?? null,
+                        'Balance' => $transaction[2]['Balance'] ?? null,
+                        'TransactionDate' => $transaction[3]['TransactionDate'] ?? null,
+                        'PhoneNumber' => $transaction[4]['PhoneNumber'] ?? null,
+                        'MerchantRequestID' => $stkCallback['MerchantRequestID'] ?? null,
+                        'CheckoutRequestID' => $stkCallback['CheckoutRequestID'] ?? null,
+                        'ResultCode' => $stkCallback['ResultCode'] ?? null,
+                        'ResultDesc' => $stkCallback['ResultDesc'] ?? null,
                     ]
                 ];

-                break;
-            case 1032:
-                $stkCallback = $requestResponse['Body']['stkCallback'];
+            case 1032: // Cancelled by user
                 return [
                     'status' => 'fail',
-                    'message' => $stkCallback['ResultDesc'],
+                    'message' => $stkCallback['ResultDesc'] ?? 'Transaction cancelled by user',
                     'data' => [
-                        'MerchantRequestID' => $stkCallback['MerchantRequestID'],
-                        'CheckoutRequestID' => $stkCallback['CheckoutRequestID'],
-                        'ResultCode' => $stkCallback['ResultCode'],
-                        'ResultDesc' => $stkCallback['ResultDesc'],
+                        'MerchantRequestID' => $stkCallback['MerchantRequestID'] ?? null,
+                        'CheckoutRequestID' => $stkCallback['CheckoutRequestID'] ?? null,
+                        'ResultCode' => $stkCallback['ResultCode'] ?? null,
+                        'ResultDesc' => $stkCallback['ResultDesc'] ?? null,
                     ]
                 ];
-                break;
-            default:
-                $stkCallback = $requestResponse['Body']['stkCallback'];
+
+            default: // Other failure
                 return [
                     'status' => 'fail',
-                    'message' => $stkCallback['ResultDesc'],
+                    'message' => $stkCallback['ResultDesc'] ?? 'Transaction failed',
                     'data' => [
-                        'MerchantRequestID' => $stkCallback['MerchantRequestID'],
-                        'CheckoutRequestID' => $stkCallback['CheckoutRequestID'],
-                        'ResultCode' => $stkCallback['ResultCode'],
-                        'ResultDesc' => $stkCallback['ResultDesc'],
+                        'MerchantRequestID' => $stkCallback['MerchantRequestID'] ?? null,
+                        'CheckoutRequestID' => $stkCallback['CheckoutRequestID'] ?? null,
+                        'ResultCode' => $stkCallback['ResultCode'] ?? null,
+                        'ResultDesc' => $stkCallback['ResultDesc'] ?? null,
                     ]
                 ];
-                break;
         }
-
     }

-    public function responseErrorDetails(array $requestResponseDetail){
-        $errorCode = $requestResponseDetail['errorCode'];
-        switch ($errorCode){
-            case "404.001.04":
-                return [
-                    'errorCode' => $errorCode,
-                    'errorRequestId' => $requestResponseDetail['requestId'],
-                    'errorDescription' => "Invalid Authentication Header",
-                    'errorMessage' => $requestResponseDetail['errorMessage']
-                ];
-
-                break;
-            case "400.002.02":
-                return [
-                    'errorCode' => $errorCode,
-                    'errorRequestId' => $requestResponseDetail['requestId'],
-                    'errorDescription' => "Bad Request",
-                    'errorMessage' => $requestResponseDetail['errorMessage']
-                ];
-
-                break;
-            case "400.002.05":
-                return [
-                    'errorCode' => $errorCode,
-                    'errorRequestId' => $requestResponseDetail['requestId'],
-                    'errorDescription' => "Invalid Request Payload",
-                    'errorMessage' => $requestResponseDetail['errorMessage']
-                ];
-
-                break;
-            case "500.001.1001":
-                return [
-                    'errorCode' => $errorCode,
-                    'errorRequestId' => $requestResponseDetail['requestId'],
-                    'errorDescription' => "Server Error",
-                    'errorMessage' => $requestResponseDetail['errorMessage']
-                ];
-
-                break;
-            case "404.001.01":
-                return [
-                    'errorCode' => $errorCode,
-                    'errorRequestId' => $requestResponseDetail['requestId'],
-                    'errorDescription' => "Resource not found",
-                    'errorMessage' => $requestResponseDetail['errorMessage']
-                ];
-
-                break;
-            case "404.001.03":
-                return [
-                    'errorCode' => $errorCode,
-                    'errorRequestId' => $requestResponseDetail['requestId'],
-                    'errorDescription' => "Invalid Access Token",
-                    'errorMessage' => $requestResponseDetail['errorMessage']
-                ];
-                break;
+    /**
+     * Get detailed information about API error responses
+     *
+     * This method provides more detailed information about error responses from the Mpesa API.
+     * It maps error codes to human-readable descriptions to help with troubleshooting.
+     *
+     * Example error response structure:
+     * ```json
+     * {
+     *   "requestId": "11728-2929992-1",
+     *   "errorCode": "404.001.04",
+     *   "errorMessage": "Authentication failed due to invalid credentials"
+     * }
+     * ```
+     *
+     * @param array $requestResponseDetail The error response from Mpesa API
+     * @return array Formatted error details with code, description, and message
+     * @throws \InvalidArgumentException If the error response is invalid
+     */
+    public function responseErrorDetails(array $requestResponseDetail): array
+    {
+        // Validate the error response structure
+        if (!isset($requestResponseDetail['errorCode'])) {
+            throw new \InvalidArgumentException('Invalid error response: Missing errorCode');
         }
-    }

-}
\ No newline at end of file
+        $errorCode = $requestResponseDetail['errorCode'];
+        $requestId = $requestResponseDetail['requestId'] ?? 'unknown';
+        $errorMessage = $requestResponseDetail['errorMessage'] ?? 'No error message provided';
+
+        // Map error codes to descriptions
+        $errorDescriptions = [
+            '404.001.04' => 'Invalid Authentication Header',
+            '400.002.02' => 'Bad Request',
+            '400.002.05' => 'Invalid Request Payload',
+            '500.001.1001' => 'Server Error',
+            '404.001.01' => 'Resource not found',
+            '404.001.03' => 'Invalid Access Token',
+            // Add more error codes and descriptions as needed
+        ];
+
+        // Get the error description or use a default if not found
+        $errorDescription = $errorDescriptions[$errorCode] ?? 'Unknown error';
+
+        return [
+            'errorCode' => $errorCode,
+            'errorRequestId' => $requestId,
+            'errorDescription' => $errorDescription,
+            'errorMessage' => $errorMessage
+        ];
+    }
+
+}
